public class 二叉树的层序遍历 {
    class Solution {

        List<List<Integer>> res = new ArrayList<>();
        public List<List<Integer>> levelOrder(TreeNode root) {
            Queue<TreeNode> queue =  new LinkedList<TreeNode>();
            queue.offer(root);
            while(!queue.isEmpty()){
                int size = queue.size(); //1
                List<Integer> list = new ArrayList<>();
                for(int i=0;i<size;i++){
                    TreeNode cur = queue.poll(); // root
                    list.add(cur.val); //[root.val]
                    if(cur.left!=null){
                        queue.offer(cur.left);
                    }
                    if(cur.right!=null){
                        queue.offer(cur.right);
                    }
                }
                res.add(list);
            }
            return  res;
        }
    }


    //二叉树右视图 当i == size -1 的时候，加入到结果集里面
    class Solution1 {
        public List<Integer> rightSideView(TreeNode root) {
            List<Integer> res = new ArrayList();
            if(root ==null) return res;
            Queue<TreeNode> queue = new LinkedList();
            queue.offer(root);
            while(!queue.isEmpty()){
                int size = queue.size();
                for(int i=0;i<size;i++){
                    TreeNode cur = queue.poll();
                    if(i==size-1){
                        res.add(cur.val);
                    }
                    if(cur.left!=null){
                        queue.offer(cur.left);
                    }
                    if(cur.right!=null){
                        queue.offer(cur.right);
                    }
                }
            }
            return res;
        }
    }


    //二叉树左视图 当i == 0 的时候，加入到结果集里面
    class Solution2 {
        public List<Integer> rightSideView(TreeNode root) {
            List<Integer> res = new ArrayList();
            if(root ==null) return res;
            Queue<TreeNode> queue = new LinkedList();
            queue.offer(root);
            while(!queue.isEmpty()){
                int size = queue.size();
                for(int i=0;i<size;i++){
                    TreeNode cur = queue.poll();
                    if(i==0){
                        res.add(cur.val);
                    }
                    if(cur.left!=null){
                        queue.offer(cur.left);
                    }
                    if(cur.right!=null){
                        queue.offer(cur.right);
                    }
                }
            }
            return res;
        }
    }
}
