public class mergeKLists {


    //采用递归加上二分的方法 一个方法用于合并链表 。上面进行二分然后排序
    public static ListNode mergeKLists(ListNode[] lists){
        return  parttion(lists,0,lists.length-1);
    }

    private static ListNode parttion(ListNode[] lists, int s, int e) {
        if(s==e) return  lists[s];
         if(s<e){
             int mid = s + (e-s)/2;
             ListNode l1 = parttion(lists,s,mid);
             ListNode l2 = parttion(lists,mid+1,e);
           return   merge(l1,l2);
         }else{
             return  null;
         }
    }


    public  static  ListNode  merge (ListNode l1,ListNode l2){
        if(l1==null) return  l2;
        if(l2==null) return  l1;
        if(l1.val<l2.val){
            l1.next=merge(l1.next,l2);
            return  l1;
        }else{
            l2.next = merge(l1,l2.next);
            return  l2;
        }

    }

    //采用小根堆  先把链表数组中的第一元素加入小根堆，然后进行比较加入小根堆排序后加到链的后面
    public static ListNode mergeKListsV2(ListNode[] lists){
        PriorityQueue<ListNode> heap = new PriorityQueue<>((a,b)->a.val-b.val);
        for(ListNode node:lists){
            heap.offer(node);
        }
        ListNode res = new ListNode(0);
        ListNode  cur =res;
        while(!heap.isEmpty()){
            ListNode top = heap.poll();
            cur.next= top;
            cur =cur.next;
            if(top.next!=null){
                heap.offer(top.next);
            }
        }
        return  res.next;
    }
}
